name: Deploy API to AWS
on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  deploy-api:
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    env:
      EB_BUCKET: ${{vars.EB_BUCKET}}
      EB_APP_NAME: ${{vars.EB_APP_NAME}}
      EB_API_ENV_NAME: ${{vars.EB_API_ENV_NAME}}
      EB_WORKER_ENV_NAME: ${{vars.EB_WORKER_ENV_NAME}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache api files
        id: cache-api
        uses: actions/cache@v4
        env: 
          cache-name: cache-api-files
        with:
          path: .
          key: ${{ hashFiles('package*.json') }}-${{ hashFiles('src/**/*') }}

      - if: ${{ steps.cache-api.outputs.cache-hit == 'true' }}
        name: Check api changes
        continue-on-error: true
        run: echo 'No api changes found. Skip api build and deployment.'

      - if: ${{ steps.cache-api.outputs.cache-hit != 'true' }}
        name: Build 
        run: |
          npm ci
          npm run build

      - if: ${{ steps.cache-api.outputs.cache-hit != 'true' }}
        name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{vars.AWS_REGION}}

      - if: ${{ steps.cache-api.outputs.cache-hit != 'true' }}
        name: Zip application
        run: zip -r app.zip . -x ".git/*" ".github/*" "infra/" "docker/" "test/"

      - if: ${{ steps.cache-api.outputs.cache-hit != 'true' }}
        name: Upload to S3
        run: |
          FILE_NAME="app-${{ github.sha }}.zip"
          aws s3 cp app.zip s3://$EB_BUCKET/$FILE_NAME
          echo "FILE_NAME=$FILE_NAME" >> $GITHUB_ENV

      - if: ${{ steps.cache-api.outputs.cache-hit != 'true' }}
        name: Create new Elastic Beanstalk Application Version
        run: |
          VERSION_LABEL="v-${{ github.run_number }}-${{ github.sha }}"
          aws elasticbeanstalk create-application-version \
            --application-name "$EB_APP_NAME" \
            --version-label $VERSION_LABEL \
            --source-bundle S3Bucket="$EB_BUCKET",S3Key="$FILE_NAME"
          echo "VERSION_LABEL=$VERSION_LABEL" >> $GITHUB_ENV

      - if: ${{ steps.cache-api.outputs.cache-hit != 'true' }}
        name: Update Environment API
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "$EB_API_ENV_NAME" \
            --version-label "$VERSION_LABEL"

      - if: ${{ steps.cache-api.outputs.cache-hit != 'true' }}
        name: Update Environment WORKER
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "$EB_WORKER_ENV_NAME" \
            --version-label "$VERSION_LABEL"

